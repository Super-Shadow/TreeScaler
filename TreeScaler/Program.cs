using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.WPF.Reflection.Attributes;

namespace TreeScaler
{
	public class Settings
	{
		[MaintainOrder]

		[SettingName("Tree Scale Multiplier")]
		[Tooltip("The number by which tree scale will be multiplied")]
		public float TreeScaleMultiplier = 1.2f;

		[SettingName("Tree EditorIDs")]
		public List<FormLink<ITreeGetter>> SelectedTrees = new()
		{
			Skyrim.Tree.TreePineForest01,
			Skyrim.Tree.TreePineForest02,
			Skyrim.Tree.TreePineForest03,
			Skyrim.Tree.TreePineForest04,
			Skyrim.Tree.TreePineForest05,

		};
	}

	public class Program
	{
		private static Lazy<Settings> _settings = null!;
		private static Settings Settings => _settings.Value;

		public static async Task<int> Main(string[] args)
		{
			return await SynthesisPipeline.Instance
				.AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
				.SetAutogeneratedSettings("Settings", "settings.json", out _settings)
				.SetTypicalOpen(GameRelease.SkyrimSE, "TreeScaler.esp")
				.Run(args);
		}

		public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
		{
			// This code was adapted from https://github.com/Bl4ckread/PineTreeScaler
			foreach (var placedObjectGetter in state.LoadOrder.PriorityOrder.PlacedObject()
						.WinningContextOverrides(state.LinkCache))
			{
				var placedObject = placedObjectGetter.Record;
				if (placedObject.Scale is null or <= 0) 
					continue;

				placedObject.Base.TryResolve<ITreeGetter>(state.LinkCache, out var placedObjectBase);
				if (placedObjectBase?.FormKey == null) 
					continue;

				foreach (var formLink in Settings.SelectedTrees)
				{
					if (formLink.FormKey != placedObjectBase.FormKey) 
						continue;

					var modifiedObject = placedObjectGetter.GetOrAddAsOverride(state.PatchMod);
					modifiedObject.Scale *= Settings.TreeScaleMultiplier;
				}
			}
		}
	}
}

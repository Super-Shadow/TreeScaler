using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.WPF.Reflection.Attributes;

namespace TreeScaler
{
	public class TreeSettings
	{
		[SettingName("Tree EditorID")]
		[Tooltip("The tree to be edited")]
		public FormLink<ITreeGetter> TreeLink;

		[SettingName("Tree Scale Multiplier")]
		[Tooltip("The number by which the trees scale will be multiplied by. This number is the max range when using random scale")]
		public float TreeScale;

		[SettingName("Use Random Tree Scale")]
		[Tooltip("Selects a random number within range to multiply a trees scale")]
		public bool TreeRandomScale;

		[SettingName("Random Tree Scale Range Min")]
		[Tooltip("The minimum number by which the trees scale will be randomly multiplied")]
		public float TreeScaleMin;

		public TreeSettings(FormLink<ITreeGetter> treeLink, float treeScale, bool treeRandomScale, float treeScaleMin)
		{
			TreeLink = treeLink;
			TreeScale = treeScale;
			TreeRandomScale = treeRandomScale;
			TreeScaleMin = treeScaleMin;
		}
	}
	public class Settings
	{
		[SettingName("Tree Scales")]
		public List<TreeSettings> SelectedTrees = new()
		{
			new TreeSettings(Skyrim.Tree.TreePineForest01, 1.2f, false, 1.0f),
			new TreeSettings(Skyrim.Tree.TreePineForest02, 1.2f, false, 1.0f),
			new TreeSettings(Skyrim.Tree.TreePineForest03, 1.2f, false, 1.0f),
			new TreeSettings(Skyrim.Tree.TreePineForest04, 1.2f, false, 1.0f),
			new TreeSettings(Skyrim.Tree.TreePineForest05, 1.2f, false, 1.0f),
		};
	}

	public class Program
	{
		private static Lazy<Settings> _settings = null!;
		private static Settings Settings => _settings.Value;

		public static async Task<int> Main(string[] args)
		{
			return await SynthesisPipeline.Instance
				.AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
				.SetAutogeneratedSettings("Settings", "settings.json", out _settings)
				.SetTypicalOpen(GameRelease.SkyrimSE, "TreeScaler.esp")
				.Run(args);
		}

		public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
		{
			var rnd = new Random();

			// This code was adapted from https://github.com/Bl4ckread/PineTreeScaler
			foreach (var placedObjectGetter in state.LoadOrder.PriorityOrder.PlacedObject()
						.WinningContextOverrides(state.LinkCache))
			{
				var placedObject = placedObjectGetter.Record;
				if (placedObject.Scale is null or <= 0) 
					continue;

				placedObject.Base.TryResolve<ITreeGetter>(state.LinkCache, out var placedObjectBase);
				if (placedObjectBase?.FormKey == null) 
					continue;

				foreach (var treeSettings in Settings.SelectedTrees)
				{
					if (treeSettings.TreeLink.FormKey != placedObjectBase.FormKey)
						continue;

					var modifiedObject = placedObjectGetter.GetOrAddAsOverride(state.PatchMod);
					if (!treeSettings.TreeRandomScale)
						modifiedObject.Scale *= treeSettings.TreeScale;
					else
						modifiedObject.Scale *= Convert.ToSingle(rnd.NextDouble() * (treeSettings.TreeScale - treeSettings.TreeScaleMin) - treeSettings.TreeScaleMin);
				}
			}
		}
	}
}
